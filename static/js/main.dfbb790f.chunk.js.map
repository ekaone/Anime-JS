{"version":3,"sources":["logo.svg","AnimeText.js","AnimeBox.js","AnimeLoop.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AnimeText","props","refBox","useRef","useState","translateX","translateY","state","setState","useEffect","console","log","_anime","anime","targets","current","value","duration","onClick","ref","AnimeBox","box","rotateZ","scale","className","AnimeLoop","box1","box2","loop","easing","direction","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uFAAAA,EAAOC,QAAU,IAA0B,kC,gMCG5B,SAASC,EAAUC,GAEhC,IAAMC,EAASC,mBAFwB,EAGbC,mBAAS,CACjCC,WAAY,EACZC,WAAY,IALyB,mBAGhCC,EAHgC,KAGzBC,EAHyB,KAOvCC,qBAAU,WACRC,QAAQC,IAAI,MAAOJ,EAAMD,YACzBI,QAAQC,IAAI,MAAOJ,EAAMD,cACxB,CAACC,EAAMD,WAAYC,EAAMF,aAE5BI,qBAAU,WACRG,OAGF,IAAMA,EAAS,WACbC,YAAM,CACJC,QAASZ,EAAOa,QAChBV,WAAY,CAAEW,MAAOT,EAAMF,YAC3BC,WAAY,CAAEU,MAAOT,EAAMD,YAC3BW,SAAU,OAId,OACE,oCACE,4BACEC,QAAS,kBACPV,EAAS,CACPH,WAAYE,EAAMF,WAAa,GAC/BC,WAAYC,EAAMD,WAAa,OAJrC,kBAQkBC,EAAMF,YACd,IACV,4BACEa,QAAS,kBACPV,EAAS,CACPH,WAAYE,EAAMF,WAAa,GAC/BC,WAAYC,EAAMD,WAAa,OAJrC,kBAQkBC,EAAMF,YAExB,yBAAKc,IAAKjB,GACR,gEChDO,SAASkB,IACtB,IAAMC,EAAMlB,mBAaZ,OACE,oCACE,4BAAQe,QAAS,WAZnBL,YAAM,CACJC,QAASO,EAAIN,QACbV,WAAY,IACZiB,QAAS,IACTC,MAAO,EACPN,SAAU,QAOV,YACA,uBAAGE,IAAKE,EAAKG,UAAU,SCjBd,SAASC,IACtB,IAAMC,EAAOvB,mBACPwB,EAAOxB,mBAmBb,OACE,oCACE,4BAAQe,QAAS,kBAlBnBL,YAAM,CACJC,QAASY,EAAKX,QACdV,WAAY,IACZuB,KAAM,EACNC,OAAQ,uBAGVhB,YAAM,CACJC,QAASa,EAAKZ,QACdV,WAAY,IACZuB,MAAM,EACNE,UAAW,YACXD,OAAQ,oBAMR,YACA,uBAAGV,IAAKO,EAAMF,UAAU,QACxB,uBAAGL,IAAKQ,EAAMH,UAAU,SCLfO,MAff,WACE,OACE,yBAAKP,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKQ,IAAKC,IAAMT,UAAU,WAAWU,IAAI,SACzC,kBAACd,EAAD,MACC,SACD,kBAACpB,EAAD,MACC,SACD,kBAACyB,EAAD,SCLYU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.dfbb790f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { useEffect, useRef, useState } from \"react\";\r\nimport anime from \"animejs\";\r\n\r\nexport default function AnimeText(props) {\r\n  // const { translateX, translateY } = props;\r\n  const refBox = useRef();\r\n  const [state, setState] = useState({\r\n    translateX: 0,\r\n    translateY: 0\r\n  });\r\n  useEffect(() => {\r\n    console.log(\"X: \", state.translateY);\r\n    console.log(\"Y: \", state.translateY);\r\n  }, [state.translateY, state.translateX]);\r\n\r\n  useEffect(() => {\r\n    _anime();\r\n  });\r\n\r\n  const _anime = () => {\r\n    anime({\r\n      targets: refBox.current,\r\n      translateX: { value: state.translateX },\r\n      translateY: { value: state.translateY },\r\n      duration: 2000\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <button\r\n        onClick={() =>\r\n          setState({\r\n            translateX: state.translateX + 10,\r\n            translateY: state.translateY + 10\r\n          })\r\n        }\r\n      >\r\n        Increase X | Y {state.translateX}\r\n      </button>{\" \"}\r\n      <button\r\n        onClick={() =>\r\n          setState({\r\n            translateX: state.translateX - 10,\r\n            translateY: state.translateY - 10\r\n          })\r\n        }\r\n      >\r\n        Decrease X | Y {state.translateX}\r\n      </button>\r\n      <div ref={refBox}>\r\n        <h2>Press button to move this text</h2>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { useRef } from \"react\";\r\nimport anime from \"animejs\";\r\n\r\nexport default function AnimeBox() {\r\n  const box = useRef();\r\n\r\n  const moveBox = () => {\r\n    anime({\r\n      targets: box.current,\r\n      translateX: 250,\r\n      rotateZ: 360,\r\n      scale: 2,\r\n      duration: 3000\r\n      // loop: true\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <button onClick={() => moveBox()}>Move Box</button>\r\n      <p ref={box} className=\"box\"></p>\r\n    </>\r\n  );\r\n}\r\n","import React, { useRef } from \"react\";\r\nimport anime from \"animejs\";\r\n\r\nexport default function AnimeLoop() {\r\n  const box1 = useRef();\r\n  const box2 = useRef();\r\n\r\n  const moveBox = () => {\r\n    anime({\r\n      targets: box1.current,\r\n      translateX: 270,\r\n      loop: 3,\r\n      easing: \"easeInOutSine\"\r\n    });\r\n\r\n    anime({\r\n      targets: box2.current,\r\n      translateX: 270,\r\n      loop: true,\r\n      direction: \"alternate\",\r\n      easing: \"easeInOutSine\"\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <button onClick={() => moveBox()}>Move Box</button>\r\n      <p ref={box1} className=\"box\"></p>\r\n      <p ref={box2} className=\"box\"></p>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\n// components\r\nimport AnimeText from \"./AnimeText\";\r\nimport AnimeBox from \"./AnimeBox\";\r\nimport AnimeLoop from \"./AnimeLoop\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <AnimeBox />\r\n        {\"\\u2728\"}\r\n        <AnimeText />\r\n        {\"\\u2728\"}\r\n        <AnimeLoop />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}